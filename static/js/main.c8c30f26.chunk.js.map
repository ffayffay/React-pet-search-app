{"version":3,"sources":["Components/JSONPromise.js","Components/Featured-pet.js","Components/No-pet-available.js","Components/Search-form-Animal-type.js","Components/Search-form-Breed.js","Components/Search-form-Location.js","Components/Pet-card-info.js","Components/Pet-card.js","Components/BUILDurl.js","App.js","serviceWorker.js","index.js"],"names":["JSONPromise","url","options","Promise","resolve","reject","jsonp","err","res","Featured_pet","props","react_default","a","createElement","className","src","randomCat","picture","alt","name","randomDog","Link","to","No_pet_available","exact","Search_form_Animal_type","value","onChange","e","setSearchData","getBreedList","Search_form_Breed","console","log","breeds","map","breed","index","key","Search_form_Location","onSubmit","preventDefault","getSearchPet","then","_","history","push","type","Pet_card_info","pet","city","state","zip","Pet_card","buildUrl","urlOptions","args","Object","keys","concat","join","formatArgs","method","encodeURI","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","assertThisInitialized","SearchData","animal","jpp","rawBreeds","get","error","setBreeds","formData","objectSpread","count","petfinder","pets","formatPetResponse","setSearchResult","cb","setState","defineProperty","target","searchResult","location","_this2","output","setFeaturedCat","_this3","setFeaturedDog","response","longDescrpt","description","media","photos","photo","length","slice","age","sex","size","phone","email","getPet","getCatFeatPet","getDogFeatPet","_this4","BrowserRouter","Route","path","render","assign","bind","result","i","Component","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8c30f26.chunk.js","sourcesContent":["import jsonp from 'jsonp';\n\nexport default (url, options) => {\n\treturn new Promise((resolve, reject) => {\n\t\tjsonp(url, options\n\t\t\t, (err, res) => {\n\t\t\t\tif(!err) return resolve(res)\n\t\t\t\tif(err) return reject(err)\n\t\t\t})\n\t})\n}\n\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nexport default (props) => {\n\n\treturn (\n\t\t<div>\n\n\t\t\t<div className=\"main-content-container feat-pet-content-wrap\">\n\t\t\t\t\t\n\t\t\t\t<div className=\"welcome\">\n\t\t\t\t\t<h1>Welcome!</h1>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"feat-pet-banner\">\n\t\t\t\t\t<h2>Featured Pets</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"feat-pet-card-wrap\">\n\t\t\t\t\n\t\t\t\t\t<div className=\"cat-card\">\n\t\t\t\t\t\t<div className=\"card-img\">\n\t\t\t\t\t\t\t<img src={props.randomCat.picture}\n\t\t\t\t\t\t\t\t alt=\"Cat\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span className=\"fp-name-header\">\n\t\t\t\t\t\t\t<h1 className=\"pet-name\">{props.randomCat.name}</h1>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{/*<h3 className=\"location\">\n\t\t\t\t\t\t\t{props.randomCat.city}, {props.randomCat.state} {props.randomCat.zip}\n\t\t\t\t\t\t</h3>*/}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"dog-card\">\n\t\t\t\t\t\t<div className=\"card-img\">\n\t\t\t\t\t\t\t<img src={props.randomDog.picture}\n\t\t\t\t\t\t\t\t alt=\"Dog\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span className=\"fp-name-header\">\n\t\t\t\t\t\t\t<h1 className=\"pet-name\">{props.randomDog.name}</h1>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{/*<h3 className=\"location\">\n\t\t\t\t\t\t\t{props.randomDog.city}, {props.randomDog.state} {props.randomDog.zip}\n\t\t\t\t\t\t</h3>*/}\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"button-wrap\">\n\t\t\t\t\t<Link to=\"/searchanimaltype\">\n\t\t\t\t\t\t<button className=\"start-search-btn\">Start Search</button>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>)\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nexport default (props) => {\n\treturn (\n\t\t<div className=\"main-content-container empty-card-info\">\n\t\t\t<div className=\"empty-card-img\">\n\t\t\t\t<img src=\"https://cdn.instructables.com/FV5/090M/GU4MC7OA/FV5090MGU4MC7OA.LARGE.jpg\"\n\t\t\t\t\t alt=\"https://www.rspcansw.org.au/wp-content/themes/noPhotoFound.png\" />\n\t\t\t</div>\n\t\t\t<h2>Sorry! No pets matching that breed available near you.</h2>\n\t\t\t<p>Try a new search</p>\n\n\t\t\t<div className=\"button-wrap\">\n\t\t\t\t<Link exact to=\"/\">\n\t\t\t\t\t<button>Back to Search</button>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nexport default (props) => {\n\treturn (\n\t\t<div className=\"search-form-item\">\n\t\t\t<form>\n\t\t\t\t<label>Select Animal Type</label>\n\t\t\t\t<select name=\"animal\" value={props.value} onChange={(e) => { \n\t// When the value of the select element is change the state is set for formData.animal to new value and getBreedList function is called\n\t\t\t\t\t \tprops.setSearchData(e, \"animal\", props.getBreedList)\t\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t\t\t<option value=\"dog\">Dog</option>\n\t\t\t\t\t<option value=\"cat\">Cat</option>\n\t\t\t\t\t<option value=\"smallfurry\">Small Furry</option>\n\t\t\t\t\t<option value=\"bird\">Bird</option>\n\t\t\t\t\t<option value=\"reptile\">Reptile</option>\n\t\t\t\t\t<option value=\"horse\">Horse</option>\n\t\t\t\t\t<option value=\"barnyard\">Barnyard</option>\n\t\t\t\t</select>\n\t\t\t</form>\n\n\t\t\t<div className=\"button-wrap\">\n\t\t\t\t<Link to=\"/searchbreed\">\n\t\t\t\t\t<button>Next</button>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nexport default (props) => {\n\tconsole.log(props)\n\treturn (\n\t\t<div className=\"search-form-item\">\n\t\t\t<form>\n\t\t\t\t<label>Select Animal Breed</label>\n\t\t\t\t<select name=\"breed\" value={props.value} onChange={(e) => props.setSearchData(e, \"breed\")}>\n\t\t\t\t\t{\n\t\t\t\t\t\tprops.breeds.map((breed, index) =>\n\t\t\t\t\t\t\t<option value={ breed } key={index}>{ breed }</option>)\n\t// The map() method is used on the breeds array to create an options element for each breed type in the array\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t</select>\n\t\t\t</form>\n\n\t\t\t<div className=\"button-wrap\">\n\t\t\t\t<Link to=\"/searchlocation\">\n\t\t\t\t\t<button>Next</button>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\n\nexport default (props) => {\n\tconsole.log(props)\n\treturn (\n\t\t<div className=\"search-form-item\">\n\t\t\t<form onSubmit={ (e) => {\n// When the form is submitted the getSearchPet function is called\n\t\t\t\t\te.preventDefault()\n\t\t\t\t\tprops.getSearchPet()\n\t\t\t\t\t\t.then(_ => props.history.push('/pet'))\n\n\t\t\t\t} }>\n\t\t\t\t<label>Enter Zip Code</label>\n\t\t\t\t<input type=\"text\" name=\"location\" value={props.value} onChange={(e) => props.setSearchData(e, \"location\")}/>\n\t\t\t\t<div className=\"button-wrap\">\n\t\t\t\t\t<button type=\"submit\">submit</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\n\t\t</div>\n\t)\n}","import React from 'react';\n\nexport default (props) => {\n\n\treturn(\n\t\t<div className=\"card-info\">\n\n\t\t\t\t\t<div className=\"pet-card-wrap\">\n\t\t\t\t\t\t<div className=\"pet-card\">\n\t\t\t\t\t\t\t<span className=\"pet-name-header\">\n\t\t\t\t\t\t\t\t<h2 className=\"pet-name\">{props.pet.name}</h2>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<div className=\"card-img\">\n\t\t\t\t\t\t\t\t<img src={props.pet.picture}\n\t\t\t\t\t\t\t\t\t alt=\"animal\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<h3 className=\"location\">\n\t\t\t\t\t\t\t\t{props.pet.city}, {props.pet.state} {props.pet.zip}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t</div>\n\t)\n}","import React from 'react';\nimport PetCardInfo from './Pet-card-info.js';\n\nexport default (props) => {\n\treturn (\n\t\t<div className=\"pet-card-container\">\n\t\t\t<div className=\"pet-card\">\n\t\t\t\t<PetCardInfo pet={props.pet} />\n   \t\t\t</div>\n\t\t</div>\n\t\t)\n}\n\n// Using a ternary operator to display the NoPetCardInfo component if isPetEmpty is equal to true\n// othewise the PetCardInfo component is displayed","function buildUrl(urlOptions) {\n\tconst baseUrl = \"http://api.petfinder.com/\";\n\tconst key = \"key=30813f445b233300ac28d89179cd71c7\";\n\tconst args = formatArgs(urlOptions.args);\n\tconst method = urlOptions.method\n\n\tfunction formatArgs(args) {\n\t\tif (!args) {\n\t\t\treturn ''\n\t\t} else {\n\t\t\treturn Object.keys(args).map(key => `${key}=${args[key]}`).join('&')\n\t\t}\n\t}\n\n\treturn encodeURI(`${baseUrl}${method}?format=json&${key}&${args}`)\n}\n\nexport default buildUrl\n\n\n//url options is an object literal with 2 properties *method and args*\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport { get } from 'lodash';\n\nimport jpp from './Components/JSONPromise.js';\nimport FeaturedPet from './Components/Featured-pet.js';\nimport NoPetAvailable from './Components/No-pet-available.js';\nimport SearchFormAnimalType from './Components/Search-form-Animal-type.js';\nimport SearchFormBreed from './Components/Search-form-Breed.js';\nimport SearchFormLocation from './Components/Search-form-Location.js';\nimport PetCard from './Components/Pet-card.js';\nimport Header from './Components/Header.js';\nimport buildUrl from './Components/BUILDurl.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n      // Defining what the state of the app will be\n      this.state = {\n        searchResult: [],\n        pet: '-',\n        randomCat: '-',\n        randomDog: '-',\n        breeds: [],\n        SearchData: {\n          animal: \"dog\",\n          breed: \"Yorkshire Terrier\",\n          location: \"47130\",\n        }\n      }\n\n      this.getBreedList()\n    }\n\n    // AJAX REQUEST **************************************\n\n  // Makes a request to petfinder for a list of breeds on specified animal\n    getBreedList = () => {\n      console.log(this)\n        let animal = this.state.SearchData.animal\n      // return jpp(`http://api.petfinder.com/breed.list?format=json&key=30813f445b233300ac28d89179cd71c7&animal=${this.state.SearchData.animal}`)\n        let urlOptions = {\n          method: 'breed.list',\n          args: {\n            animal: this.state.SearchData.animal \n          }\n        }\n        return jpp(buildUrl(urlOptions))\n        .then(res => {\n          console.log(res)\n          let rawBreeds = get(res, 'petfinder.breeds.breed', null);\n\n          if (rawBreeds === null) return console.error('oopss')\n          let breeds = rawBreeds.map(breed => breed['$t'])\n          \n          this.setBreeds(breeds)\n        })\n    }\n\n\n\n  // Makes a request to petfinder using the api method pet.find to get an array of pets that match the arguments chosen from the search form\n      getSearchPet = () => {\n      let formData = this.state.SearchData\n      // let { animal, breed, location } = formData\n      // return jpp(`http://api.petfinder.com/pet.find?format=json&key=30813f445b233300ac28d89179cd71c7&animal=${animal}&${breed=breed}&location=${location}&count=10`)\n      let urlOptions = {\n        method: 'pet.find',\n        args: { \n          ...formData, \n          count: 10 \n        }\n      }\n      return jpp(buildUrl(urlOptions))\n        .then(res => res.petfinder.pets.pet.map(this.formatPetResponse))\n        .then(res => this.setSearchResult(res))\n    }\n\n    // A request to petfinder using pet.find to get a random cat for the featured pet component\n    getCatFeatPet() {\n      // return jpp(`http://api.petfinder.com/pet.find?format=json&key=30813f445b233300ac28d89179cd71c7&animal=cat&location=47130`)\n      let urlOptions = {\n        method: 'pet.getRandom',\n        args: {\n          animal: 'cat',\n          output: 'basic'\n        }\n      }\n      return jpp(buildUrl(urlOptions))\n        .then(res => {\n          let randomCat = res.petfinder.pet\n          this.setFeaturedCat(this.formatPetResponse(randomCat))\n        })\n        // .then(res => {\n        //   let cats = res.petfinder.pets.pet\n        //   let randomIndex = Math.floor(Math.random() * cats.length)\n        //   let randomCat = cats[randomIndex]\n\n        //   this.setFeaturedCat(this.formatPetResponse(randomCat))\n        // })\n        \n    }\n      \n  // A request to petfinder using pet.find to get a random dog for the featured pet component\n    getDogFeatPet() {\n      // return jpp(`http://api.petfinder.com/pet.find?format=json&key=30813f445b233300ac28d89179cd71c7&animal=dog&location=47130`)\n        let urlOptions = {\n          method: 'pet.getRandom',\n          args: {\n            animal: 'dog',\n            output: 'basic'\n          }\n        }\n        return jpp(buildUrl(urlOptions))\n        .then(res => {\n          let randomDog = res.petfinder.pet\n          this.setFeaturedDog(this.formatPetResponse(randomDog))\n        })\n        // .then(res => {\n        //   let dogs = res.petfinder.pets.pet\n        //   let randomIndex = Math.floor(Math.random() * dogs.length)\n        //   let randomDog = dogs[randomIndex]\n\n        //   this.setFeaturedDog(this.formatPetResponse(randomDog))\n        // })\n        \n    }\n  // AJAX REQUEST END **********************************\n\n  // SET STATE *****************************************\n\n  // The following functions all are used to set the state of the app\n    setFeaturedCat(randomCat) {\n        this.setState({\n          randomCat: randomCat\n        })\n      }\n\n    setFeaturedDog(randomDog) {\n      this.setState({\n        randomDog: randomDog\n      })\n    }\n\n     setBreeds(breeds) {\n      this.setState({\n        breeds: breeds\n      })\n    }\n\n    setSearchData = (e, value, cb) => {\n      e.preventDefault();\n      this.setState({\n        SearchData: {\n          ...this.state.SearchData,\n          [value]: e.target.value\n        }\n      }, cb);\n    }\n\n    setSearchResult(searchResult) {\n      this.setState({\n        searchResult: searchResult\n      })\n    }\n\n  // FORMATTING RESPONSE ********************************\n  formatPetResponse(response) {\n    let photo;\n    let shortDescrpt;\n\n    if (response.petfinder && response.petfinder.pet) {\n      var pet = response.petfinder.pet;\n    } else {\n      var pet = response\n    }\n\n    let longDescrpt = pet.description ? (pet.description['$t'] || \"\") : \"\";\n\n   \n  // Used to set the default image if pet has no photo\n    if (pet.media && pet.media.photos && pet.media.photos.photo[2]) {\n      console.log('has photo')\n      photo = pet.media.photos.photo[2]['$t']\n    } else {\n      photo = \"https://www.rspcansw.org.au/wp-content/themes/noPhotoFound.png\"\n    }\n\n  // Checks length of description; Sets description to a 300 character max\n    if(longDescrpt && longDescrpt.length > 300) {\n        shortDescrpt = longDescrpt.slice(0, 300) + '...'\n    }\n    \n    console.log(pet)\n    \n    if (!pet) {\n      return this.getPet\n    }\n    return {\n      age: get(pet, 'age[\"$t\"]', \"Not Known\"),\n      name: get(pet, 'name[\"$t\"]', \"very lovable!\"),\n      breed: get(pet, 'breeds.breed[\"$t\"]', 'animal[\"$t\"]'),\n      description: get(pet, 'description[\"$t\"]', \"\"),\n      picture: get(pet, 'media.photos.photo[2][\"$t\"]', \"https://www.rspcansw.org.au/wp-content/themes/noPhotoFound.png\"),\n      sex: get(pet, 'sex[\"$t\"]', \"N/A\"),\n      size: get(pet, 'size[\"$t\"]', \"N/A\"),\n      city: get(pet, 'contact.city[\"$t\"]', \"N/A\"),\n      state: get(pet, 'contact.state[\"$t\"]', \"N/A\"),\n      zip: get(pet, 'contact.zip[\"$t\"]', \"\"),\n      phone: get(pet, 'contact.phone[\"$t\"]', \"N/A\"),\n      email: get(pet, 'contact.email[\"$t\"]', \"N/A\")\n\n    }\n  }\n  // FORMATTING RESPONSE END *****************************\n\n  // Makes the request for getPet, getCatFeatPet, and getDogFeatPet when the component mounts\n  componentDidMount() {\n    this.getCatFeatPet()\n    this.getDogFeatPet()\n  }\n\n  // ***** RENDER *******************************************\n\n  // Renders the main components of app\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route exact path=\"/\" render={() => <FeaturedPet\n                                          randomCat={ this.state.randomCat }\n                                          randomDog={ this.state.randomDog } />} />\n          <Route path=\"/searchanimaltype\" render={() => <SearchFormAnimalType\n                                                         getBreedList={ this.getBreedList }\n                                                         setSearchData={ this.setSearchData }  />} />\n          <Route path=\"/searchbreed\" render={() => <SearchFormBreed\n                                                      breeds={ this.state.breeds }\n                                                      setSearchData={ this.setSearchData } />} />\n          <Route path=\"/searchlocation\" render={(props) => <SearchFormLocation { ...props }\n                                                      setSearchData={ this.setSearchData }\n                                                      getSearchPet={ this.getSearchPet.bind(this) } />} />\n          <Route path=\"/pet\" render={() => <div className=\"main-content-container\">{ this.state.searchResult.map((result, i) => <PetCard\n                                                                                          key={ i }\n                                                                                          pet={ result } />) }</div> }/>\n          <Route path=\"/nopetavailable\" render={() => <NoPetAvailable />} />\n\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n\n     {/* if(this.state.searchResult.length === 0) {\n        return (\n          <BrowserRouter>\n            <div className=\"App\">\n\n              <FeaturedPet \n                randomCat={ this.state.randomCat }\n                randomDog={ this.state.randomDog } />\n\n              <NoPetAvailable />\n\n              <div className=\"main-content-container\">\n                <SearchFormAnimalType\n                getBreedList={ this.getBreedList }\n                setSearchData={ this.setSearchData } />\n\n                <SearchFormBreed\n                breeds={ this.state.breeds }\n                setSearchData={ this.setSearchData } />\n\n                <SearchFormLocation\n                setSearchData={ this.setSearchData }\n                getSearchPet={ this.getSearchPet.bind(this) } />\n\n               </div>\n\n             </div>\n           </BrowserRouter>\n         )\n      } else {\n        return (\n          <div className=\"App\">\n            <Header />\n            <div className=\"main-content-container\">\n              { this.state.searchResult.map((result, i) => <PetCard key={ i } pet={ result } />) }\n            </div>\n          </div>\n        )\n      }\n      \n    } */}\n  \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}